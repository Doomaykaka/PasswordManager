/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.4/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'
    id "io.toolebox.git-versioner" version "1.6.7"
    id 'checkstyle'
    id "com.diffplug.spotless" version "6.13.0"
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.3'

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:32.1.1-jre'
    implementation 'org.jasypt:jasypt:1.9.3'
    implementation 'com.formdev:flatlaf-intellij-themes:3.2.5'
    implementation 'com.formdev:flatlaf:3.2.5'
    implementation 'com.diffplug.spotless:spotless-plugin-gradle:6.13.0'
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

versioner {
	pattern {
        pattern = "%M.%m.%p"
    }

    startFrom {
        major = 1
        minor = 0
        patch = 0
    }
}

versioner.apply()

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

javadoc{
	options.memberLevel = JavadocMemberLevel.PRIVATE
	source = sourceSets.main.allJava
	destinationDir = file("${project.rootDir}/docs")
	title = "Password Manager v${project.version}"
}

spotless {
  java {
    importOrder()
    //removeUnusedImports() //can creates errors
    eclipse()
    formatAnnotations()
  }
}

checkstyle {
    toolVersion '10.3.3'
    configFile file("${project.rootDir}/config/checkstyle/checkstyle.xml")
    ignoreFailures = true
    maxWarnings = 0
    maxErrors = 0
    showViolations = false
}

checkstyleMain{
	ant.lifecycleLogLevel = "INFO"
}

checkstyleTest{
	ant.lifecycleLogLevel = "INFO"
}

